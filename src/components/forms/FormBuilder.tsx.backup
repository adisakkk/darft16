'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Switch } from '@/components/ui/switch';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Plus, 
  Trash2, 
  Edit, 
  Eye, 
  FileText, 
  Mail, 
  Phone, 
  Calendar, 
  Hash,
  MessageSquare,
  CheckSquare,
  RadioIcon,
  ChevronDown,
  GripVertical,
  Settings,
  Save,
  Link,
  File,
  Map as MapIcon,
  Download,
  Copy,
  Move,
  Lock,
  Unlock,
  Palette,
  Sparkles,
  Zap,
  Target,
  Layers,
  Grid3X3,
  List,
  Layout,
  Send,
  Inbox,
  ChevronDown as ChevronDownIcon,
  Upload,
  ArrowLeft
} from 'lucide-react';
import { useTemplates } from '@/hooks/use-templates';
import { useForms } from '@/hooks/use-forms';
import FieldMappingInterface from '@/components/mapping/FieldMappingInterface';
import MultiDatePicker from '@/components/ui/multi-date-picker';

interface FormField {
  id: string;
  type: string;
  label: string;
  name: string;
  required: boolean;
  placeholder?: string;
  options?: string[];
  description?: string;
  validation?: {
    min?: number;
    max?: number;
    pattern?: string;
  };
  styling?: {
    width?: 'full' | 'half' | 'third';
    color?: string;
    borderRadius?: 'none' | 'sm' | 'md' | 'lg';
  };
  conditional?: {
    showWhen?: string;
    operator?: 'equals' | 'not_equals' | 'contains' | 'empty' | 'not_empty';
    value?: string;
  };
}

interface FormBuilderProps {
  onSave: (form: { 
    name: string; 
    description: string; 
    fields: FormField[];
    enablePdfGeneration: boolean;
    linkedTemplateId?: string;
    autoGeneratePdf: boolean;
    autoEmailPdf: boolean;
    showPdfDownload: boolean;
    thankYouMessage: string;
    enableRedirect: boolean;
    redirectUrl?: string;
  }) => void;
  initialForm?: any;
  previewMode?: boolean;
}

const fieldTypes = [
  { type: 'text', label: 'Text', icon: FileText, description: 'Single line text input', color: 'bg-blue-50 border-blue-200 hover:bg-blue-100' },
  { type: 'email', label: 'Email', icon: Mail, description: 'Email address input', color: 'bg-green-50 border-green-200 hover:bg-green-100' },
  { type: 'number', label: 'Number', icon: Hash, description: 'Numeric input', color: 'bg-purple-50 border-purple-200 hover:bg-purple-100' },
  { type: 'date', label: 'Date', icon: Calendar, description: 'Date picker', color: 'bg-orange-50 border-orange-200 hover:bg-orange-100' },
  { type: 'multi-date', label: 'Multi-Date', icon: Calendar, description: 'Multiple date selector', color: 'bg-red-50 border-red-200 hover:bg-red-100' },
  { type: 'tel', label: 'Phone', icon: Phone, description: 'Phone number input', color: 'bg-indigo-50 border-indigo-200 hover:bg-indigo-100' },
  { type: 'textarea', label: 'Textarea', icon: MessageSquare, description: 'Multi-line text input', color: 'bg-cyan-50 border-cyan-200 hover:bg-cyan-100' },
  { type: 'select', label: 'Dropdown', icon: ChevronDown, description: 'Select from options', color: 'bg-yellow-50 border-yellow-200 hover:bg-yellow-100' },
  { type: 'radio', label: 'Radio', icon: RadioIcon, description: 'Single selection', color: 'bg-pink-50 border-pink-200 hover:bg-pink-100' },
  { type: 'checkbox', label: 'Checkbox', icon: CheckSquare, description: 'Single checkbox', color: 'bg-teal-50 border-teal-200 hover:bg-teal-100' },
];

export default function FormBuilder({ onSave, initialForm, previewMode = false }: FormBuilderProps) {
  const { templates } = useTemplates();
  const { updateForm } = useForms();
  
  const [formName, setFormName] = useState(initialForm?.name || '');
  const [formDescription, setFormDescription] = useState(initialForm?.description || '');
  const [fields, setFields] = useState<FormField[]>(initialForm?.fields || []);
  const [selectedField, setSelectedField] = useState<string | null>(null);
  const [draggedField, setDraggedField] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('builder');
  const [isSaving, setIsSaving] = useState(false);
  
  // Live Preview State
  const [previewData, setPreviewData] = useState<Record<string, any>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitResult, setSubmitResult] = useState<any>(null);
  const [showSubmitResult, setShowSubmitResult] = useState(false);
  const [showThankYouPage, setShowThankYouPage] = useState(false);
  const [currentStep, setCurrentStep] = useState<'form' | 'submitting' | 'thankyou'>('form');
  
  // PDF Generation Settings
  const [enablePdfGeneration, setEnablePdfGeneration] = useState(initialForm?.enablePdfGeneration || false);
  const [linkedTemplateId, setLinkedTemplateId] = useState(initialForm?.linkedTemplateId || '');
  const [autoGeneratePdf, setAutoGeneratePdf] = useState(initialForm?.autoGeneratePdf ?? true);
  const [autoEmailPdf, setAutoEmailPdf] = useState(initialForm?.autoEmailPdf || false);
  const [showPdfDownload, setShowPdfDownload] = useState(initialForm?.showPdfDownload ?? true);
  
  // Form Settings
  const [thankYouMessage, setThankYouMessage] = useState(initialForm?.thankYouMessage || 'Thanks for completing the form! We\'ll be in touch shortly.');
  const [enableRedirect, setEnableRedirect] = useState(initialForm?.enableRedirect || false);
  const [redirectUrl, setRedirectUrl] = useState(initialForm?.redirectUrl || '');

  const addField = (type: string) => {
    const newField: FormField = {
      id: Date.now().toString(),
      type,
      label: `New ${type.charAt(0).toUpperCase() + type.slice(1)} Field`,
      name: `field_${Date.now()}`,
      required: false,
      placeholder: '',
      description: '',
      options: type === 'select' || type === 'radio' ? ['Option 1', 'Option 2'] : undefined,
      validation: {},
      styling: {
        width: 'full',
        borderRadius: 'md',
      },
      conditional: undefined,
    };
    setFields([...fields, newField]);
    setSelectedField(newField.id);
  };

  const updateField = (fieldId: string, updates: Partial<FormField>) => {
    setFields(fields.map(field => 
      field.id === fieldId ? { ...field, ...updates } : field
    ));
  };

  const deleteField = (fieldId: string) => {
    setFields(fields.filter(field => field.id !== fieldId));
    if (selectedField === fieldId) {
      setSelectedField(null);
    }
  };

  const duplicateField = (fieldId: string) => {
    const field = fields.find(f => f.id === fieldId);
    if (field) {
      const newField = {
        ...field,
        id: Date.now().toString(),
        name: `${field.name}_copy`,
        label: `${field.label} (Copy)`,
      };
      setFields([...fields, newField]);
      setSelectedField(newField.id);
    }
  };

  const moveField = (dragIndex: number, hoverIndex: number) => {
    const draggedFieldItem = fields[dragIndex];
    const newFields = [...fields];
    newFields.splice(dragIndex, 1);
    newFields.splice(hoverIndex, 0, draggedFieldItem);
    setFields(newFields);
  };

  const handleDragStart = (e: React.DragEvent, fieldId: string) => {
    setDraggedField(fieldId);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDrop = (e: React.DragEvent, dropIndex: number) => {
    e.preventDefault();
    if (draggedField) {
      const dragIndex = fields.findIndex(f => f.id === draggedField);
      if (dragIndex !== dropIndex) {
        moveField(dragIndex, dropIndex);
      }
    }
    setDraggedField(null);
  };

  const addOption = (fieldId: string) => {
    const field = fields.find(f => f.id === fieldId);
    if (field && field.options) {
      updateField(fieldId, {
        options: [...field.options, `Option ${field.options.length + 1}`]
      });
    }
  };

  const updateOption = (fieldId: string, optionIndex: number, value: string) => {
    const field = fields.find(f => f.id === fieldId);
    if (field && field.options) {
      const newOptions = [...field.options];
      newOptions[optionIndex] = value;
      updateField(fieldId, { options: newOptions });
    }
  };

  const deleteOption = (fieldId: string, optionIndex: number) => {
    const field = fields.find(f => f.id === fieldId);
    if (field && field.options) {
      updateField(fieldId, {
        options: field.options.filter((_, index) => index !== optionIndex)
      });
    }
  };

  const handleSave = async () => {
    if (!formName.trim()) {
      alert('Please enter a form name');
      return;
    }
    if (fields.length === 0) {
      alert('Please add at least one field');
      return;
    }

    setIsSaving(true);
    try {
      const formData = {
        name: formName,
        description: formDescription,
        fields,
        enablePdfGeneration,
        linkedTemplateId: enablePdfGeneration ? linkedTemplateId : null,
        autoGeneratePdf,
        autoEmailPdf,
        showPdfDownload,
        thankYouMessage,
        enableRedirect,
        redirectUrl: enableRedirect ? redirectUrl : null,
      };

      if (initialForm?.id) {
        await updateForm(initialForm.id, formData);
      }
      
      onSave(formData);
    } catch (error) {
      console.error('Failed to save form:', error);
      alert('Failed to save form. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };

  // Live Preview Functions
  const handlePreviewChange = (fieldName: string, value: any) => {
    setPreviewData(prev => ({
      ...prev,
      [fieldName]: value
    }));
  };

  const handlePreviewSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setCurrentStep('submitting');
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const result = {
        id: Date.now().toString(),
        timestamp: new Date().toISOString(),
        data: previewData,
        formName: formName,
        fields: fields
      };
      
      setSubmitResult(result);
      setShowSubmitResult(true);
      setCurrentStep('thankyou');
      
      // Show thank you page for 3 seconds, then show results
      setTimeout(() => {
        setShowThankYouPage(true);
      }, 500);
    } catch (error) {
      console.error('Submit failed:', error);
      alert('Failed to submit form. Please try again.');
      setCurrentStep('form');
    } finally {
      setIsSubmitting(false);
    }
  };

  const resetPreviewForm = () => {
    setPreviewData({});
    setShowSubmitResult(false);
    setSubmitResult(null);
    setShowThankYouPage(false);
    setCurrentStep('form');
  };

  const restartJourney = () => {
    resetPreviewForm();
  };

  const renderFieldPreview = (field: FormField) => {
    const baseProps = {
      placeholder: field.placeholder,
      disabled: previewMode,
    };

    switch (field.type) {
      case 'textarea':
        return <Textarea {...baseProps} rows={3} />;
      case 'select':
        return (
          <Select disabled={previewMode}>
            <SelectTrigger>
              <SelectValue placeholder={field.placeholder || 'Select an option'} />
            </SelectTrigger>
            <SelectContent>
              {field.options?.map((option, index) => (
                <SelectItem key={index} value={option}>{option}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        );
      case 'radio':
        return (
          <div className="space-y-2">
            {field.options?.map((option, index) => (
              <div key={index} className="flex items-center space-x-2">
                <input type="radio" name={field.name} disabled={previewMode} />
                <label className="text-sm">{option}</label>
              </div>
            ))}
          </div>
        );
      case 'checkbox':
        return (
          <div className="flex items-center space-x-2">
            <input type="checkbox" disabled={previewMode} />
            <label className="text-sm">{field.label}</label>
          </div>
        );
      case 'multi-date':
        return (
          <MultiDatePicker
            value={field.placeholder ? [field.placeholder] : []}
            onChange={() => {}}
            disabled={previewMode}
            placeholder="Select multiple dates"
          />
        );
      default:
        return <Input type={field.type} {...baseProps} />;
    }
  };

  const renderLiveField = (field: FormField) => {
    const value = previewData[field.name] || '';
    
    switch (field.type) {
      case 'textarea':
        return (
          <Textarea
            value={value}
            onChange={(e) => handlePreviewChange(field.name, e.target.value)}
            placeholder={field.placeholder}
            rows={3}
            required={field.required}
          />
        );
      case 'select':
        return (
          <Select value={value} onValueChange={(val) => handlePreviewChange(field.name, val)} required={field.required}>
            <SelectTrigger>
              <SelectValue placeholder={field.placeholder || 'Select an option'} />
            </SelectTrigger>
            <SelectContent>
              {field.options?.map((option, index) => (
                <SelectItem key={index} value={option}>{option}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        );
      case 'radio':
        return (
          <div className="space-y-2">
            {field.options?.map((option, index) => (
              <div key={index} className="flex items-center space-x-2">
                <input
                  type="radio"
                  name={field.name}
                  id={`${field.name}-${index}`}
                  value={option}
                  checked={value === option}
                  onChange={(e) => handlePreviewChange(field.name, e.target.value)}
                  required={field.required}
                />
                <label htmlFor={`${field.name}-${index}`} className="text-sm">{option}</label>
              </div>
            ))}
          </div>
        );
      case 'checkbox':
        return (
          <div className="flex items-center space-x-2">
            <input
              type="checkbox"
              id={field.name}
              checked={value || false}
              onChange={(e) => handlePreviewChange(field.name, e.target.checked)}
              required={field.required}
            />
            <label htmlFor={field.name} className="text-sm">{field.label}</label>
          </div>
        );
      case 'multi-date':
        return (
          <MultiDatePicker
            value={value || []}
            onChange={(dates) => handlePreviewChange(field.name, dates)}
            placeholder="Select multiple dates"
          />
        );
      default:
        return (
          <Input
            type={field.type}
            value={value}
            onChange={(e) => handlePreviewChange(field.name, e.target.value)}
            placeholder={field.placeholder}
            required={field.required}
          />
        );
    }
  };

  const selectedFieldData = fields.find(f => f.id === selectedField);

  if (previewMode) {
    return (
      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>{formName}</CardTitle>
            {formDescription && <CardDescription>{formDescription}</CardDescription>}
          </CardHeader>
          <CardContent className="space-y-6">
            {fields.map((field) => (
              <div key={field.id} className="space-y-2">
                <Label className="text-base font-medium">
                  {field.label}
                  {field.required && <span className="text-red-500 ml-1">*</span>}
                </Label>
                {field.description && (
                  <p className="text-sm text-muted-foreground">{field.description}</p>
                )}
                {renderFieldPreview(field)}
              </div>
            ))}
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="h-screen flex flex-col overflow-hidden">
      {/* Header */}
      <div className="border-b bg-white p-4 flex-shrink-0">
        <div className="flex items-center justify-between">
          <div className="space-y-1 flex-1">
            <Input
              value={formName}
              onChange={(e) => setFormName(e.target.value)}
              placeholder="Form Name"
              className="text-2xl font-bold border-none shadow-none px-0 focus-visible:ring-0"
            />
            <Textarea
              value={formDescription}
              onChange={(e) => setFormDescription(e.target.value)}
              placeholder="Form Description (optional)"
              className="border-none shadow-none px-0 focus-visible:ring-0 resize-none"
              rows={1}
            />
          </div>
          <div className="flex items-center space-x-2 ml-4">
            <Button 
              variant="outline" 
              onClick={handleSave}
              disabled={isSaving}
            >
              {isSaving ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2" />
                  Saving...
                </>
              ) : (
                <>
                  <Save className="h-4 w-4 mr-2" />
                  Save Draft
                </>
              )}
            </Button>
            <Button 
              onClick={handleSave}
              disabled={isSaving}
            >
              {isSaving ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2" />
                  Saving...
                </>
              ) : (
                <>
                  <Save className="h-4 w-4 mr-2" />
                  Save & Publish
                </>
              )}
            </Button>
          </div>
        </div>
      </div>

      {/* Main Content with Tabs */}
      <div className="flex-1 flex overflow-hidden">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
          <div className="border-b bg-white px-4 flex-shrink-0">
            <TabsList className="grid w-full grid-cols-5">
              <TabsTrigger value="builder">Form Builder</TabsTrigger>
              <TabsTrigger value="preview">Live Preview</TabsTrigger>
              <TabsTrigger value="pdf">PDF Settings</TabsTrigger>
              <TabsTrigger value="mapping">Field Mapping</TabsTrigger>
              <TabsTrigger value="settings">Form Settings</TabsTrigger>
            </TabsList>
          </div>

          {/* Form Builder Tab */}
          <TabsContent value="builder" className="flex-1 flex m-0">
            {/* Left Panel - Field Types */}
            <div className="w-80 border-r bg-gradient-to-b from-gray-50 to-white flex flex-col flex-shrink-0">
              <div className="p-4 border-b bg-white">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-semibold text-lg flex items-center">
                    <Sparkles className="h-5 w-5 mr-2 text-yellow-500" />
                    Field Types
                  </h3>
                  <div className="flex items-center text-xs text-gray-500">
                    <ChevronDownIcon className="h-3 w-3 mr-1 animate-bounce" />
                    Scroll
                  </div>
                </div>
                <p className="text-sm text-muted-foreground">Drag and drop or click to add fields</p>
              </div>
              
              <ScrollArea className="flex-1 p-4">
                <div className="space-y-3 pb-4">
                  {fieldTypes.map((fieldType) => (
                    <Button
                      key={fieldType.type}
                      variant="outline"
                      className={`w-full h-auto p-4 justify-start border-2 transition-all duration-200 hover:scale-105 hover:shadow-md ${fieldType.color}`}
                      onClick={() => addField(fieldType.type)}
                    >
                      <div className={`p-2 rounded-lg mr-3 ${fieldType.color.split(' ')[0]}`}>
                        <fieldType.icon className="h-5 w-5" />
                      </div>
                      <div className="text-left flex-1">
                        <div className="font-semibold text-sm">{fieldType.label}</div>
                        <div className="text-xs text-muted-foreground mt-1">
                          {fieldType.description}
                        </div>
                      </div>
                      <Plus className="h-4 w-4 opacity-50" />
                    </Button>
                  ))}
                </div>
                
                <div className="mt-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border border-blue-200">
                  <div className="flex items-center mb-2">
                    <Zap className="h-4 w-4 mr-2 text-blue-600" />
                    <span className="font-medium text-sm">Pro Tip</span>
                  </div>
                  <p className="text-xs text-muted-foreground">
                    Use the Multi-Date field for booking forms, event registration, or any scenario requiring multiple date selection.
                  </p>
                </div>
              </ScrollArea>
            </div>

            {/* Middle Panel - Form Preview */}
            <div className="flex-1 flex flex-col bg-gradient-to-b from-white to-gray-50">
              <div className="p-4 border-b bg-white">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-semibold text-lg mb-2 flex items-center">
                      <Eye className="h-5 w-5 mr-2 text-blue-500" />
                      Form Preview
                    </h3>
                    <p className="text-sm text-muted-foreground">
                      Click on fields to configure them • Drag to reorder
                    </p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="flex items-center text-xs text-gray-500">
                      <ChevronDownIcon className="h-3 w-3 mr-1 animate-bounce" />
                      Scroll
                    </div>
                    <Button variant="outline" size="sm" className="text-xs">
                      <Layout className="h-3 w-3 mr-1" />
                      Layout
                    </Button>
                    <Button variant="outline" size="sm" className="text-xs">
                      <Grid3X3 className="h-3 w-3 mr-1" />
                      Grid
                    </Button>
                  </div>
                </div>
              </div>
              
              <ScrollArea className="flex-1 p-6">
                <div className="max-w-2xl mx-auto pb-6">
                
                {fields.length === 0 ? (
                  <Card className="text-center py-16 border-2 border-dashed border-gray-300 bg-gradient-to-b from-gray-50 to-white">
                    <div className="space-y-4">
                      <div className="mx-auto w-20 h-20 bg-gradient-to-br from-blue-100 to-purple-100 rounded-full flex items-center justify-center">
                        <FileText className="h-10 w-10 text-blue-500" />
                      </div>
                      <div>
                        <h3 className="text-xl font-semibold mb-2">Start Building Your Form</h3>
                        <p className="text-gray-600 mb-4">Choose from our field types on the left to get started</p>
                        <div className="flex justify-center space-x-2">
                          <Button 
                            variant="outline" 
                            size="sm"
                            onClick={() => addField('text')}
                            className="text-xs"
                          >
                            <Plus className="h-3 w-3 mr-1" />
                            Add Text Field
                          </Button>
                          <Button 
                            variant="outline" 
                            size="sm"
                            onClick={() => addField('email')}
                            className="text-xs"
                          >
                            <Plus className="h-3 w-3 mr-1" />
                            Add Email Field
                          </Button>
                        </div>
                      </div>
                    </div>
                  </Card>
                ) : (
                  <Card className="shadow-lg border-0">
                    <CardContent className="p-8 space-y-6">
                      {fields.map((field, index) => (
                        <div
                          key={field.id}
                          className={`space-y-3 p-6 rounded-xl border-2 transition-all duration-200 cursor-pointer group ${
                            selectedField === field.id
                              ? 'border-blue-500 bg-gradient-to-r from-blue-50 to-indigo-50 shadow-md'
                              : 'border-gray-200 bg-white hover:border-gray-300 hover:shadow-md'
                          }`}
                          onClick={() => setSelectedField(field.id)}
                          draggable
                          onDragStart={(e) => handleDragStart(e, field.id)}
                          onDragOver={handleDragOver}
                          onDrop={(e) => handleDrop(e, index)}
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-3">
                              <div className={`p-2 rounded-lg ${fieldTypes.find(ft => ft.type === field.type)?.color.split(' ')[0] || 'bg-gray-100'}`}>
                                <GripVertical className="h-4 w-4 text-gray-400" />
                              </div>
                              <div>
                                <span className="text-sm font-semibold text-gray-600 flex items-center">
                                  Field {index + 1}
                                  {field.required && <Lock className="h-3 w-3 ml-2 text-red-500" />}
                                </span>
                                <div className="flex items-center space-x-2 mt-1">
                                  <Badge variant="secondary" className="text-xs">
                                    {fieldTypes.find(ft => ft.type === field.type)?.label || field.type}
                                  </Badge>
                                  {field.required && <Badge variant="destructive" className="text-xs">Required</Badge>}
                                </div>
                              </div>
                            </div>
                            <div className="flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity">
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  duplicateField(field.id);
                                }}
                                className="h-8 w-8 p-0"
                              >
                                <Copy className="h-4 w-4" />
                              </Button>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  deleteField(field.id);
                                }}
                                className="h-8 w-8 p-0 hover:text-red-500"
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                          <div className="space-y-3">
                            <Label className="text-base font-semibold">
                              {field.label}
                              {field.required && <span className="text-red-500 ml-1">*</span>}
                            </Label>
                            {field.description && (
                              <p className="text-sm text-muted-foreground bg-gray-50 p-3 rounded-lg">
                                {field.description}
                              </p>
                            )}
                            <div className="transform transition-transform hover:scale-[1.02]">
                              {renderFieldPreview(field)}
                            </div>
                          </div>
                        </div>
                      ))}
                    </CardContent>
                  </Card>
                )}
                </div>
              </ScrollArea>
            </div>

            {/* Right Panel - Field Configuration */}
            <div className="w-80 border-l bg-gradient-to-b from-gray-50 to-white flex flex-col flex-shrink-0">
              <div className="p-4 border-b bg-white">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-semibold text-lg mb-2 flex items-center">
                    <Settings className="h-5 w-5 mr-2 text-purple-500" />
                    Field Configuration
                  </h3>
                  <div className="flex items-center text-xs text-gray-500">
                    <ChevronDownIcon className="h-3 w-3 mr-1 animate-bounce" />
                    Scroll
                  </div>
                </div>
                <p className="text-sm text-muted-foreground">Customize field properties and behavior</p>
              </div>
              
              <ScrollArea className="flex-1 p-4">
                <div className="space-y-6">
                  {selectedFieldData ? (
                    <div className="space-y-6">
                      {/* Basic Settings */}
                      <div className="p-4 bg-white rounded-lg border border-gray-200">
                    <h4 className="font-medium mb-4 flex items-center text-sm">
                      <Target className="h-4 w-4 mr-2 text-blue-500" />
                      Basic Settings
                    </h4>
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="field-label" className="text-sm font-medium">Field Label</Label>
                        <Input
                          id="field-label"
                          value={selectedFieldData.label}
                          onChange={(e) => updateField(selectedFieldData.id, { label: e.target.value })}
                          className="mt-1"
                        />
                      </div>

                      <div>
                        <Label htmlFor="field-name" className="text-sm font-medium">Field Name</Label>
                        <Input
                          id="field-name"
                          value={selectedFieldData.name}
                          onChange={(e) => updateField(selectedFieldData.id, { name: e.target.value })}
                          className="mt-1"
                        />
                      </div>

                      <div>
                        <Label htmlFor="field-description" className="text-sm font-medium">Description</Label>
                        <Textarea
                          id="field-description"
                          value={selectedFieldData.description || ''}
                          onChange={(e) => updateField(selectedFieldData.id, { description: e.target.value })}
                          placeholder="Optional field description"
                          rows={2}
                          className="mt-1"
                        />
                      </div>

                      <div>
                        <Label htmlFor="field-placeholder" className="text-sm font-medium">Placeholder</Label>
                        <Input
                          id="field-placeholder"
                          value={selectedFieldData.placeholder || ''}
                          onChange={(e) => updateField(selectedFieldData.id, { placeholder: e.target.value })}
                          placeholder="Enter placeholder text"
                          className="mt-1"
                        />
                      </div>

                      <div className="flex items-center space-x-2 p-3 bg-gray-50 rounded-lg">
                        <Switch
                          id="field-required"
                          checked={selectedFieldData.required}
                          onCheckedChange={(checked) => updateField(selectedFieldData.id, { required: checked })}
                        />
                        <Label htmlFor="field-required" className="text-sm font-medium">
                          Required field
                        </Label>
                        {selectedFieldData.required && <Lock className="h-3 w-3 text-red-500" />}
                      </div>
                    </div>
                  </div>

                  {/* Styling Options */}
                  <div className="p-4 bg-white rounded-lg border border-gray-200">
                    <h4 className="font-medium mb-4 flex items-center text-sm">
                      <Palette className="h-4 w-4 mr-2 text-purple-500" />
                      Styling Options
                    </h4>
                    <div className="space-y-4">
                      <div>
                        <Label className="text-sm font-medium">Field Width</Label>
                        <Select
                          value={selectedFieldData.styling?.width || 'full'}
                          onValueChange={(value: 'full' | 'half' | 'third') => 
                            updateField(selectedFieldData.id, {
                              styling: { ...selectedFieldData.styling, width: value }
                            })
                          }
                        >
                          <SelectTrigger className="mt-1">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="full">Full Width</SelectItem>
                            <SelectItem value="half">Half Width</SelectItem>
                            <SelectItem value="third">Third Width</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <Label className="text-sm font-medium">Border Radius</Label>
                        <Select
                          value={selectedFieldData.styling?.borderRadius || 'md'}
                          onValueChange={(value: 'none' | 'sm' | 'md' | 'lg') => 
                            updateField(selectedFieldData.id, {
                              styling: { ...selectedFieldData.styling, borderRadius: value }
                            })
                          }
                        >
                          <SelectTrigger className="mt-1">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="none">None</SelectItem>
                            <SelectItem value="sm">Small</SelectItem>
                            <SelectItem value="md">Medium</SelectItem>
                            <SelectItem value="lg">Large</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>

                  {/* Options for select/radio fields */}
                  {(selectedFieldData.type === 'select' || selectedFieldData.type === 'radio') && (
                    <div className="p-4 bg-white rounded-lg border border-gray-200">
                      <h4 className="font-medium mb-4 flex items-center text-sm">
                        <List className="h-4 w-4 mr-2 text-green-500" />
                        Field Options
                      </h4>
                      <div className="space-y-3">
                        <div className="flex items-center justify-between">
                          <Label className="text-sm font-medium">Options</Label>
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => addOption(selectedFieldData.id)}
                            className="text-xs"
                          >
                            <Plus className="h-3 w-3 mr-1" />
                            Add Option
                          </Button>
                        </div>
                        <div className="space-y-2">
                          {selectedFieldData.options?.map((option, optionIndex) => (
                            <div key={optionIndex} className="flex items-center space-x-2">
                              <Input
                                value={option}
                                onChange={(e) => updateOption(selectedFieldData.id, optionIndex, e.target.value)}
                                placeholder="Option text"
                                className="text-sm"
                              />
                              <Button
                                type="button"
                                variant="ghost"
                                size="sm"
                                onClick={() => deleteOption(selectedFieldData.id, optionIndex)}
                                className="h-8 w-8 p-0 hover:text-red-500"
                              >
                                <Trash2 className="h-3 w-3" />
                              </Button>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Validation for number fields */}
                  {selectedFieldData.type === 'number' && (
                    <div className="p-4 bg-white rounded-lg border border-gray-200">
                      <h4 className="font-medium mb-4 flex items-center text-sm">
                        <Target className="h-4 w-4 mr-2 text-orange-500" />
                        Number Validation
                      </h4>
                      <div className="space-y-3">
                        <div className="grid grid-cols-2 gap-2">
                          <div>
                            <Label htmlFor="min-value" className="text-xs font-medium">Min Value</Label>
                            <Input
                              id="min-value"
                              type="number"
                              value={selectedFieldData.validation?.min || ''}
                              onChange={(e) => updateField(selectedFieldData.id, {
                                validation: {
                                  ...selectedFieldData.validation,
                                  min: e.target.value ? Number(e.target.value) : undefined
                                }
                              })}
                              placeholder="Min"
                              className="mt-1"
                            />
                          </div>
                          <div>
                            <Label htmlFor="max-value" className="text-xs font-medium">Max Value</Label>
                            <Input
                              id="max-value"
                              type="number"
                              value={selectedFieldData.validation?.max || ''}
                              onChange={(e) => updateField(selectedFieldData.id, {
                                validation: {
                                  ...selectedFieldData.validation,
                                  max: e.target.value ? Number(e.target.value) : undefined
                                }
                              })}
                              placeholder="Max"
                              className="mt-1"
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Multi-Date specific settings */}
                  {selectedFieldData.type === 'multi-date' && (
                    <div className="p-4 bg-gradient-to-r from-red-50 to-pink-50 rounded-lg border border-red-200">
                      <h4 className="font-medium mb-3 flex items-center text-sm">
                        <Calendar className="h-4 w-4 mr-2 text-red-500" />
                        Multi-Date Settings
                      </h4>
                      <div className="space-y-3">
                        <p className="text-xs text-muted-foreground">
                          This field allows users to select multiple dates. Perfect for booking forms, event registration, and scheduling.
                        </p>
                        <div className="flex items-center space-x-2">
                          <Switch
                            id="allow-past"
                            defaultChecked={true}
                          />
                          <Label htmlFor="allow-past" className="text-sm">Allow past dates</Label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Switch
                            id="limit-dates"
                            defaultChecked={false}
                          />
                          <Label htmlFor="limit-dates" className="text-sm">Limit number of dates</Label>
                        </div>
                      </div>
                    </div>
                  )}
                    </div>
                  ) : (
                <div className="text-center py-12 text-muted-foreground">
                  <div className="mx-auto w-16 h-16 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full flex items-center justify-center mb-4">
                    <Settings className="h-8 w-8 opacity-50" />
                  </div>
                  <p className="text-sm font-medium mb-1">No Field Selected</p>
                  <p className="text-xs">Click on a field in the preview to configure its properties</p>
                </div>
                  )}
                </div>
              </ScrollArea>
            </div>
          </TabsContent>

          {/* Live Preview Tab */}
          <TabsContent value="preview" className="flex-1 p-6 overflow-y-auto">
            <div className="max-w-6xl mx-auto">
              <div className="mb-6">
                <h3 className="font-semibold text-lg mb-2 flex items-center">
                  <Eye className="h-5 w-5 mr-2 text-green-500" />
                  Live Preview
                </h3>
                <p className="text-sm text-muted-foreground">
                  Test your form as users would see it. Fill out the form and submit to see the results.
                </p>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Form Preview */}
                <div>
                  <Card className="shadow-lg">
                    <CardHeader>
                      <CardTitle className="flex items-center justify-between">
                        <span>{formName || 'Untitled Form'}</span>
                        <Button variant="outline" size="sm" onClick={resetPreviewForm}>
                          <Trash2 className="h-4 w-4 mr-1" />
                          Clear
                        </Button>
                      </CardTitle>
                      {formDescription && (
                        <CardDescription>{formDescription}</CardDescription>
                      )}
                    </CardHeader>
                    <CardContent>
                      {fields.length === 0 ? (
                        <div className="text-center py-12 text-gray-500">
                          <FileText className="h-12 w-12 mx-auto mb-4 opacity-50" />
                          <p>No fields added yet. Switch to Form Builder to add fields.</p>
                        </div>
                      ) : (
                        <form onSubmit={handlePreviewSubmit} className="space-y-6">
                          {fields.map((field) => (
                            <div key={field.id} className="space-y-2">
                              <Label className="text-base font-medium">
                                {field.label}
                                {field.required && <span className="text-red-500 ml-1">*</span>}
                              </Label>
                              {field.description && (
                                <p className="text-sm text-muted-foreground">{field.description}</p>
                              )}
                              {renderLiveField(field)}
                            </div>
                          ))}
                          
                          <div className="flex space-x-3 pt-4">
                            <Button 
                              type="submit" 
                              disabled={isSubmitting || fields.length === 0}
                              className="flex-1"
                            >
                              {isSubmitting ? (
                                <>
                                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2" />
                                  Submitting...
                                </>
                              ) : (
                                <>
                                  <Send className="h-4 w-4 mr-2" />
                                  Submit Form
                                </>
                              )}
                            </Button>
                            <Button 
                              type="button" 
                              variant="outline" 
                              onClick={resetPreviewForm}
                            >
                              Reset
                            </Button>
                          </div>
                        </form>
                      )}
                    </CardContent>
                  </Card>
                </div>

                {/* Submission Results */}
                <div>
                  <Card className="shadow-lg">
                    <CardHeader>
                      <CardTitle className="flex items-center">
                        <FileText className="h-5 w-5 mr-2 text-blue-500" />
                        Submission Results
                      </CardTitle>
                      <CardDescription>
                        View the submitted data in real-time
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      {!showSubmitResult ? (
                        <div className="text-center py-12 text-gray-500">
                          <Inbox className="h-12 w-12 mx-auto mb-4 opacity-50" />
                          <p>No submission yet. Fill out and submit the form to see results.</p>
                        </div>
                      ) : (
                        <div className="space-y-4">
                          <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                            <h4 className="font-medium text-green-800 mb-2">✅ Form Submitted Successfully!</h4>
                            <p className="text-sm text-green-600">
                              Submission ID: {submitResult.id}
                            </p>
                            <p className="text-xs text-green-500">
                              {new Date(submitResult.timestamp).toLocaleString()}
                            </p>
                          </div>
                          
                          <div className="space-y-3">
                            <h4 className="font-medium text-sm text-gray-700">Submitted Data:</h4>
                            <div className="bg-gray-50 p-4 rounded-lg max-h-96 overflow-y-auto">
                              {Object.entries(submitResult.data).map(([key, value]) => {
                                const field = fields.find(f => f.name === key);
                                return (
                                  <div key={key} className="mb-3 pb-3 border-b border-gray-200 last:border-0">
                                    <div className="font-medium text-sm text-gray-700">
                                      {field?.label || key}
                                    </div>
                                    <div className="text-sm text-gray-600 break-words">
                                      {Array.isArray(value) ? value.join(', ') : String(value) || '(empty)'}
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                          </div>
                          
                          <div className="flex space-x-2">
                            <Button 
                              variant="outline" 
                              size="sm" 
                              onClick={() => {
                                navigator.clipboard.writeText(JSON.stringify(submitResult.data, null, 2));
                                alert('Data copied to clipboard!');
                              }}
                            >
                              <Copy className="h-3 w-3 mr-1" />
                              Copy JSON
                            </Button>
                            <Button 
                              variant="outline" 
                              size="sm" 
                              onClick={resetPreviewForm}
                            >
                              New Test
                            </Button>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              </ScrollArea>
            </div>
          </TabsContent>

          {/* PDF Settings Tab */}
          <TabsContent value="pdf" className="flex-1 p-6 overflow-y-auto">
            <div className="max-w-4xl mx-auto space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <File className="h-5 w-5" />
                    <span>PDF Generation Settings</span>
                  </CardTitle>
                  <CardDescription>
                    Configure how PDFs are generated from form submissions
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="flex items-center space-x-2">
                    <Switch
                      id="enable-pdf-generation"
                      checked={enablePdfGeneration}
                      onCheckedChange={setEnablePdfGeneration}
                    />
                    <Label htmlFor="enable-pdf-generation" className="text-base font-medium">
                      Enable PDF Generation
                    </Label>
                  </div>

                  {enablePdfGeneration && (
                    <>
                      <div>
                        <Label htmlFor="linked-template">Linked PDF Template</Label>
                        <Select value={linkedTemplateId} onValueChange={setLinkedTemplateId}>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a PDF template" />
                          </SelectTrigger>
                          <SelectContent>
                            {templates.map((template) => (
                              <SelectItem key={template.id} value={template.id}>
                                {template.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <Label htmlFor="pdf-upload">Or Upload New PDF Template</Label>
                        <div className="mt-2">
                          <div className="flex items-center justify-center w-full h-32 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 transition-colors">
                            <label htmlFor="pdf-upload" className="flex flex-col items-center justify-center cursor-pointer w-full h-full">
                              <Upload className="w-8 h-8 text-gray-400 mb-2" />
                              <p className="text-sm text-gray-600">Click to upload PDF template</p>
                              <p className="text-xs text-gray-500">PDF files only (MAX. 10MB)</p>
                              <input
                                id="pdf-upload"
                                type="file"
                                className="hidden"
                                accept=".pdf"
                                onChange={(e) => {
                                  const file = e.target.files?.[0];
                                  if (file) {
                                    // Handle PDF upload
                                    console.log('PDF uploaded:', file.name);
                                    // Here you would typically upload to server and create a template
                                  }
                                }}
                              />
                            </label>
                          </div>
                        </div>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Switch
                          id="auto-generate-pdf"
                          checked={autoGeneratePdf}
                          onCheckedChange={setAutoGeneratePdf}
                        />
                        <Label htmlFor="auto-generate-pdf">Auto-generate PDF on submission</Label>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Switch
                          id="show-pdf-download"
                          checked={showPdfDownload}
                          onCheckedChange={setShowPdfDownload}
                        />
                        <Label htmlFor="show-pdf-download">Show PDF download link to users</Label>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Switch
                          id="auto-email-pdf"
                          checked={autoEmailPdf}
                          onCheckedChange={setAutoEmailPdf}
                        />
                        <Label htmlFor="auto-email-pdf">Email PDF to submitter</Label>
                      </div>
                    </>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Field Mapping Tab */}
          <TabsContent value="mapping" className="flex-1 p-6 overflow-y-auto">
            <div className="max-w-6xl mx-auto">
              {enablePdfGeneration && linkedTemplateId ? (
                <FieldMappingInterface formId={initialForm?.id} />
              ) : (
                <Card className="text-center py-12">
                  <MapIcon className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                  <h3 className="text-lg font-medium mb-2">PDF Generation Not Configured</h3>
                  <p className="text-gray-600 mb-4">
                    Enable PDF generation and select a template to configure field mapping
                  </p>
                  <Button onClick={() => setActiveTab('pdf')}>
                    Configure PDF Settings
                  </Button>
                </Card>
              )}
            </div>
          </TabsContent>

          {/* Form Settings Tab */}
          <TabsContent value="settings" className="flex-1 p-6 overflow-y-auto">
            <div className="max-w-4xl mx-auto space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Submission Settings</CardTitle>
                  <CardDescription>
                    Configure what happens after a user submits the form
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="thank-you-message">Thank You Message</Label>
                    <Textarea
                      id="thank-you-message"
                      value={thankYouMessage}
                      onChange={(e) => setThankYouMessage(e.target.value)}
                      rows={3}
                    />
                  </div>

                  <div className="flex items-center space-x-2">
                    <Switch
                      id="enable-redirect"
                      checked={enableRedirect}
                      onCheckedChange={setEnableRedirect}
                    />
                    <Label htmlFor="enable-redirect">Enable redirect after submission</Label>
                  </div>

                  {enableRedirect && (
                    <div>
                      <Label htmlFor="redirect-url">Redirect URL</Label>
                      <Input
                        id="redirect-url"
                        value={redirectUrl}
                        onChange={(e) => setRedirectUrl(e.target.value)}
                        placeholder="https://example.com/thank-you"
                      />
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}